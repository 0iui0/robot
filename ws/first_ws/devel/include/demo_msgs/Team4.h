// Generated by gencpp from file demo_msgs/Team4.msg
// DO NOT EDIT!


#ifndef DEMO_MSGS_MESSAGE_TEAM4_H
#define DEMO_MSGS_MESSAGE_TEAM4_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <demo_msgs/Student.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Twist.h>
#include <demo_msgs/Student.h>

namespace demo_msgs
{
template <class ContainerAllocator>
struct Team4_
{
  typedef Team4_<ContainerAllocator> Type;

  Team4_()
    : name()
    , leader()
    , intro()
    , location()
    , members()  {
    }
  Team4_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , leader(_alloc)
    , intro(_alloc)
    , location(_alloc)
    , members(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::demo_msgs::Student_<ContainerAllocator>  _leader_type;
  _leader_type leader;

   typedef  ::std_msgs::String_<ContainerAllocator>  _intro_type;
  _intro_type intro;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef std::vector< ::demo_msgs::Student_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::demo_msgs::Student_<ContainerAllocator> >::other >  _members_type;
  _members_type members;





  typedef boost::shared_ptr< ::demo_msgs::Team4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo_msgs::Team4_<ContainerAllocator> const> ConstPtr;

}; // struct Team4_

typedef ::demo_msgs::Team4_<std::allocator<void> > Team4;

typedef boost::shared_ptr< ::demo_msgs::Team4 > Team4Ptr;
typedef boost::shared_ptr< ::demo_msgs::Team4 const> Team4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo_msgs::Team4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo_msgs::Team4_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo_msgs::Team4_<ContainerAllocator1> & lhs, const ::demo_msgs::Team4_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.leader == rhs.leader &&
    lhs.intro == rhs.intro &&
    lhs.location == rhs.location &&
    lhs.members == rhs.members;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo_msgs::Team4_<ContainerAllocator1> & lhs, const ::demo_msgs::Team4_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::demo_msgs::Team4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_msgs::Team4_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo_msgs::Team4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo_msgs::Team4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_msgs::Team4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_msgs::Team4_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo_msgs::Team4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccc100d1d4c1606945bd893da4b64a28";
  }

  static const char* value(const ::demo_msgs::Team4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xccc100d1d4c16069ULL;
  static const uint64_t static_value2 = 0x45bd893da4b64a28ULL;
};

template<class ContainerAllocator>
struct DataType< ::demo_msgs::Team4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo_msgs/Team4";
  }

  static const char* value(const ::demo_msgs::Team4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo_msgs::Team4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"Student leader \n"
"std_msgs/String intro\n"
"geometry_msgs/Twist location \n"
"Student[] members\n"
"\n"
"================================================================================\n"
"MSG: demo_msgs/Student\n"
"string name\n"
"int32 age\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::demo_msgs::Team4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo_msgs::Team4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.leader);
      stream.next(m.intro);
      stream.next(m.location);
      stream.next(m.members);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Team4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo_msgs::Team4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo_msgs::Team4_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "leader: ";
    s << std::endl;
    Printer< ::demo_msgs::Student_<ContainerAllocator> >::stream(s, indent + "  ", v.leader);
    s << indent << "intro: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.intro);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "members[]" << std::endl;
    for (size_t i = 0; i < v.members.size(); ++i)
    {
      s << indent << "  members[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::demo_msgs::Student_<ContainerAllocator> >::stream(s, indent + "    ", v.members[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO_MSGS_MESSAGE_TEAM4_H
