# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from demo_msgs/Team3.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import demo_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class Team3(genpy.Message):
  _md5sum = "f57c072b89f0cdd1735089d396821dae"
  _type = "demo_msgs/Team3"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
Student leader 
std_msgs/String intro
geometry_msgs/Twist location 

================================================================================
MSG: demo_msgs/Student
string name
int32 age

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['name','leader','intro','location']
  _slot_types = ['string','demo_msgs/Student','std_msgs/String','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,leader,intro,location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Team3, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.leader is None:
        self.leader = demo_msgs.msg.Student()
      if self.intro is None:
        self.intro = std_msgs.msg.String()
      if self.location is None:
        self.location = geometry_msgs.msg.Twist()
    else:
      self.name = ''
      self.leader = demo_msgs.msg.Student()
      self.intro = std_msgs.msg.String()
      self.location = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.age
      buff.write(_get_struct_i().pack(_x))
      _x = self.intro.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.location.linear.x, _x.location.linear.y, _x.location.linear.z, _x.location.angular.x, _x.location.angular.y, _x.location.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.leader is None:
        self.leader = demo_msgs.msg.Student()
      if self.intro is None:
        self.intro = std_msgs.msg.String()
      if self.location is None:
        self.location = geometry_msgs.msg.Twist()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leader.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leader.name = str[start:end]
      start = end
      end += 4
      (self.leader.age,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.intro.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.intro.data = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.location.linear.x, _x.location.linear.y, _x.location.linear.z, _x.location.angular.x, _x.location.angular.y, _x.location.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leader.age
      buff.write(_get_struct_i().pack(_x))
      _x = self.intro.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.location.linear.x, _x.location.linear.y, _x.location.linear.z, _x.location.angular.x, _x.location.angular.y, _x.location.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.leader is None:
        self.leader = demo_msgs.msg.Student()
      if self.intro is None:
        self.intro = std_msgs.msg.String()
      if self.location is None:
        self.location = geometry_msgs.msg.Twist()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leader.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leader.name = str[start:end]
      start = end
      end += 4
      (self.leader.age,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.intro.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.intro.data = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.location.linear.x, _x.location.linear.y, _x.location.linear.z, _x.location.angular.x, _x.location.angular.y, _x.location.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
